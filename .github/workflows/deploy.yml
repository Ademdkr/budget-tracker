name: Deploy

# Budget Tracker Deployment
# Deploys the application to Cloudflare Pages (Frontend), Workers (API), and manages database migrations
# Requires secrets: CLOUDFLARE_API_TOKEN, CLOUDFLARE_ACCOUNT_ID, DATABASE_URL

on:
  # Automatic deployment on push to main
  push:
    branches: [main]
  
  # Manual deployment trigger
  workflow_dispatch:

jobs:
  deploy-database:
    runs-on: ubuntu-latest
    name: Deploy Database Migrations
    steps:
      - uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

      - name: Create .env file for Prisma
        run: |
          cd apps/backend
          echo "DATABASE_URL=postgresql://dummy:dummy@dummy:5432/dummy" > .env
          echo "DIRECT_DATABASE_URL=postgresql://dummy:dummy@dummy:5432/dummy" >> .env

      - name: Generate Prisma Client with full debug
        working-directory: apps/backend
        run: |
          echo "Current directory: $(pwd)"
          echo "Schema location: $(ls -la prisma/schema.prisma)"
          pnpm exec prisma generate --schema=./prisma/schema.prisma
          echo "Checking generated client..."
          find ../../node_modules -name "@prisma" -type d 2>/dev/null || echo "Prisma client not found"
          
      - name: Force install Prisma Client
        working-directory: apps/backend  
        run: |
          pnpm add @prisma/client
          pnpm exec prisma generate --schema=./prisma/schema.prisma

      - name: Verify Prisma types
        working-directory: apps/backend
        run: |
          echo "Checking if @prisma/client can be imported..."
          node -e "console.log('Prisma client test:'); const { PrismaClient } = require('@prisma/client'); console.log('PrismaClient imported successfully');"
          
      - name: Build Backend (Test)
        working-directory: apps/backend
        run: |
          echo "Starting backend build..."
          pnpm build
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

      - name: Deploy Database Changes
        working-directory: apps/backend
        run: pnpm prisma migrate deploy
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          DIRECT_DATABASE_URL: ${{ secrets.DIRECT_DATABASE_URL }}

  deploy-frontend:
    runs-on: ubuntu-latest
    name: Deploy Frontend to Cloudflare Pages
    steps:
      - uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

      - name: Build Frontend
        run: pnpm --filter @budget-tracker/frontend build

      - name: Deploy to Cloudflare Pages
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          workingDirectory: 'apps/frontend'
          command: pages deploy dist/apps/frontend --project-name=budget-tracker-frontend

  deploy-worker:
    runs-on: ubuntu-latest
    name: Deploy Worker to Cloudflare Workers
    needs: [deploy-database]
    steps:
      - uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

      - name: Test Worker Build
        run: pnpm --filter @budget-tracker/worker build

      - name: Deploy to Cloudflare Workers
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          workingDirectory: 'apps/worker'
          command: deploy --env=""

  # Optional: Backend Deployment
  # Hinweis: NestJS läuft nicht nativ auf Cloudflare Workers.
  # Für Backend-Deployment sollte eine alternative Plattform gewählt werden:
  # - Railway (https://railway.app) - Einfache Node.js Deployments
  # - Render (https://render.com) - Free Tier verfügbar
  # - Fly.io (https://fly.io) - Gute Performance
  # - Vercel (mit Next.js API Routes) - Serverless Functions
  #
  # Beispiel für Railway:
  # deploy-backend:
  #   runs-on: ubuntu-latest
  #   name: Deploy Backend to Railway
  #   needs: [deploy-database]
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Install Railway CLI
  #       run: npm install -g @railway/cli
  #     - name: Deploy to Railway
  #       run: railway up
  #       env:
  #         RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
